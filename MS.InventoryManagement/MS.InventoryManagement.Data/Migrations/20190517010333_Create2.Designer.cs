// <auto-generated />
using System;
using MS.InventoryManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MS.InventoryManagement.Data.Migrations
{
    [DbContext(typeof(InventoryManagementDbContext))]
    [Migration("20190517010333_Create2")]
    partial class Create2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.InventoryTransaction", b =>
                {
                    b.Property<int>("InventoryTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<int>("MasterEntityId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<double>("UnitCost");

                    b.HasKey("InventoryTransactionId");

                    b.ToTable("InventoryTransactions");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<double>("AverageCost");

                    b.Property<string>("BinLocation");

                    b.Property<int>("CommittedQuantity");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<int>("OnHandQuantity");

                    b.Property<int>("OnOrderQuantity");

                    b.Property<string>("ProductNumber");

                    b.Property<double>("UnitPrice");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductNumber");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("City");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<int>("MasterPurchaseOrderId");

                    b.Property<double>("OrderTotal");

                    b.Property<string>("PostalCode");

                    b.Property<int>("PurchaseOrderNumber");

                    b.Property<int>("PurchaseOrderStatusId");

                    b.Property<string>("Region");

                    b.Property<string>("SupplierName");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("PurchaseOrderStatusId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<int>("MasterPurchaseOrderDetailId");

                    b.Property<int>("OrderQuantity");

                    b.Property<double>("OrderTotal");

                    b.Property<string>("ProductDescription");

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductNumber");

                    b.Property<int>("PurchaseOrderId");

                    b.Property<int>("ReceivedQuantity");

                    b.Property<double>("UnitPrice");

                    b.HasKey("PurchaseOrderDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderDetails");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.PurchaseOrderStatus", b =>
                {
                    b.Property<int>("PurchaseOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("PurchaseOrderStatusId");

                    b.ToTable("PurchaseOrderStatuses");

                    b.HasData(
                        new
                        {
                            PurchaseOrderStatusId = 1,
                            Description = "Open"
                        },
                        new
                        {
                            PurchaseOrderStatusId = 2,
                            Description = "Submitted"
                        },
                        new
                        {
                            PurchaseOrderStatusId = 3,
                            Description = "Completed"
                        });
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.SalesOrder", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("City");

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<int>("MasterSalesOrderId");

                    b.Property<double>("OrderTotal");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Region");

                    b.Property<int>("SalesOrderNumber");

                    b.Property<int>("SalesOrderStatusId");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("SalesOrderStatusId");

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<int>("MasterSalesOrderDetailId");

                    b.Property<int>("OrderQuantity");

                    b.Property<double>("OrderTotal");

                    b.Property<string>("ProductDescription");

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductNumber");

                    b.Property<int>("SalesOrderId");

                    b.Property<int>("ShippedQuantity");

                    b.Property<double>("UnitPrice");

                    b.HasKey("SalesOrderDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderDetails");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.SalesOrderStatus", b =>
                {
                    b.Property<int>("SalesOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("SalesOrderStatusId");

                    b.ToTable("SalesOrderStatuses");

                    b.HasData(
                        new
                        {
                            SalesOrderStatusId = 1,
                            Description = "Open"
                        },
                        new
                        {
                            SalesOrderStatusId = 2,
                            Description = "Submitted"
                        },
                        new
                        {
                            SalesOrderStatusId = 3,
                            Description = "Completed"
                        });
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.TransactionQueueInbound", b =>
                {
                    b.Property<int>("TransactionQueueInboundId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("ExchangeName");

                    b.Property<string>("Payload");

                    b.Property<int>("SenderTransactionQueueId");

                    b.Property<string>("TransactionCode");

                    b.HasKey("TransactionQueueInboundId");

                    b.ToTable("TransactionQueueInbound");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.TransactionQueueInboundHistory", b =>
                {
                    b.Property<int>("TransactionQueueInboundHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateCreatedInbound");

                    b.Property<bool>("DuplicateMessage");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("ExchangeName");

                    b.Property<string>("Payload");

                    b.Property<bool>("ProcessedSuccessfully");

                    b.Property<int>("SenderTransactionQueueId");

                    b.Property<string>("TransactionCode");

                    b.Property<int>("TransactionQueueInboundId");

                    b.HasKey("TransactionQueueInboundHistoryId");

                    b.ToTable("TransactionQueueInboundHistory");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.TransactionQueueOutbound", b =>
                {
                    b.Property<int>("TransactionQueueOutboundId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateSentToExchange");

                    b.Property<DateTime>("DateToResendToExchange");

                    b.Property<string>("ExchangeName");

                    b.Property<string>("Payload");

                    b.Property<bool>("SentToExchange");

                    b.Property<string>("TransactionCode");

                    b.HasKey("TransactionQueueOutboundId");

                    b.ToTable("TransactionQueueOutbound");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.TransactionQueueOutboundHistory", b =>
                {
                    b.Property<int>("TransactionQueueOutboundHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateOutboundTransactionCreated");

                    b.Property<DateTime>("DateSentToExchange");

                    b.Property<DateTime>("DateToResendToExchange");

                    b.Property<string>("ExchangeName");

                    b.Property<string>("Payload");

                    b.Property<bool>("SentToExchange");

                    b.Property<string>("TransactionCode");

                    b.Property<int>("TransactionQueueOutboundId");

                    b.HasKey("TransactionQueueOutboundHistoryId");

                    b.ToTable("TransactionQueueOutboundHistory");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.TransactionQueueSemaphore", b =>
                {
                    b.Property<int>("TransactionQueueSemaphoreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("SemaphoreKey");

                    b.HasKey("TransactionQueueSemaphoreId");

                    b.HasIndex("SemaphoreKey")
                        .IsUnique()
                        .HasFilter("[SemaphoreKey] IS NOT NULL");

                    b.ToTable("TransactionQueueSemaphores");
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.PurchaseOrder", b =>
                {
                    b.HasOne("MS.InventoryManagement.Data.Models.PurchaseOrderStatus", "PurchaseOrderStatus")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.PurchaseOrderDetail", b =>
                {
                    b.HasOne("MS.InventoryManagement.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MS.InventoryManagement.Data.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.SalesOrder", b =>
                {
                    b.HasOne("MS.InventoryManagement.Data.Models.SalesOrderStatus", "SalesOrderStatus")
                        .WithMany()
                        .HasForeignKey("SalesOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MS.InventoryManagement.Data.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("MS.InventoryManagement.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MS.InventoryManagement.Data.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
