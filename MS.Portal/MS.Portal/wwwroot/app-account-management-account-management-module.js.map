{"version":3,"sources":["webpack:///./src/app/account-management/account-management.module.ts","webpack:///./src/app/account-management/account-management.routing.ts","webpack:///./src/app/account-management/login/login.component.css","webpack:///./src/app/account-management/login/login.component.html","webpack:///./src/app/account-management/login/login.component.ts","webpack:///./src/app/account-management/register/register.component.css","webpack:///./src/app/account-management/register/register.component.html","webpack:///./src/app/account-management/register/register.component.ts"],"names":[],"mappings":"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","file":"app-account-management-account-management-module.js","sourcesContent":["import { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AccountManagementRoutingModule } from './account-management.routing';\r\n\r\nimport {\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatSnackBarModule,\r\n    MatProgressBarModule,\r\n    MatFormFieldModule,\r\n    MatCardModule,\r\n    MatGridListModule,\r\n  } from '@angular/material';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    AccountManagementRoutingModule,\r\n      CommonModule,\r\n      FormsModule,\r\n      MatTabsModule,\r\n      MatInputModule,\r\n      MatButtonModule,\r\n      MatSelectModule,\r\n      MatIconModule,\r\n      MatListModule,\r\n      MatIconModule,\r\n      MatSidenavModule,\r\n      MatToolbarModule,\r\n      MatSnackBarModule,\r\n      MatProgressBarModule,\r\n      MatFormFieldModule,\r\n      MatCardModule,\r\n      MatGridListModule,\r\n  ],\r\n  declarations: [RegisterComponent, LoginComponent]\r\n})\r\nexport class AccountManagementModule { }\r\n\r\n","import { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst AccountManagementRoutes: Routes = [\r\n    { path: '', component: LoginComponent },\r\n    { path: 'account-login', component: LoginComponent},\r\n    { path: 'account-register', component: RegisterComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(AccountManagementRoutes)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountManagementRoutingModule { }\r\n","module.exports = \"mat-form-field {\\r\\n    width: 300px;\\r\\n  }\"","module.exports = \"<section>\\r\\n  \\r\\n<mat-card>\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>\\r\\n        <h2>Login</h2>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n  \\r\\n      <form>\\r\\n  \\r\\n        <div>\\r\\n          <mat-form-field >\\r\\n            <input matInput type=\\\"email\\\" name=\\\"EmailAddress\\\" value=\\\"{{userViewModel.emailAddress}}\\\" [(ngModel)]=\\\"userViewModel.emailAddress\\\" placeholder=\\\"Email Address\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n  \\r\\n        <div>\\r\\n          <mat-form-field>\\r\\n            <input matInput  type=\\\"password\\\"  name=\\\"Password\\\" placeholder=\\\"Password\\\" value=\\\"{{userViewModel.password}}\\\" [(ngModel)]=\\\"userViewModel.password\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n  \\r\\n      </form>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n      <button mat-flat-button color=\\\"primary\\\" (click)=\\\"login()\\\">Login</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n\\r\\n</section>\\r\\n\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from '../../shared-components-services/alert.service';\r\nimport { HttpService } from '../../shared-components-services/http.service';\r\nimport { UserViewModelResponse } from '../view-models/user-response.viewmodel';\r\nimport { SessionService } from '../../shared-components-services/session.service';\r\nimport { UserViewModel } from '../../shared-view-models/user.viewmodel';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login-component',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n  public userViewModel: UserViewModel;\r\n\r\n  constructor( private router: Router, private httpService: HttpService,\r\n    private alertService: AlertService, private sessionService: SessionService) {\r\n\r\n    this.userViewModel = new UserViewModel();\r\n    this.userViewModel.emailAddress = 'bgates@microsoft.com';\r\n    this.userViewModel.password = '123456';\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public login() {\r\n\r\n    localStorage.removeItem('token');\r\n    let user = new UserViewModel();\r\n    user = this.userViewModel;\r\n\r\n    let url = this.sessionService.appSettings.accountManagementWebApiUrl +  'authorization/login';\r\n    this.httpService.HttpPost<UserViewModelResponse>(url, user).subscribe((response: UserViewModelResponse) => {\r\n      this.loginSuccess(response);\r\n    }, response => this.loginFailed(response));\r\n\r\n  }\r\n\r\n  private loginSuccess(response: UserViewModelResponse) {\r\n    const message = 'Login Successful.';\r\n    this.alertService.ShowSuccessMessage(message);\r\n    localStorage.setItem('token', response.entity.token);\r\n    this.sessionService.setUserViewModel(response.entity);\r\n    this.router.navigate(['/home/home']);\r\n  }\r\n\r\n  private loginFailed(error: HttpErrorResponse) {\r\n    let errorResponse: UserViewModelResponse = error.error;\r\n    if (error.status > 0) {\r\n      this.alertService.ShowErrorMessage(errorResponse.returnMessage[0]);\r\n    } else {\r\n      this.alertService.ShowErrorMessage(error.message);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n","module.exports = \"\"","module.exports = \"<mat-card>\\r\\n  <mat-card-header>\\r\\n    <mat-card-title>\\r\\n      <h2>Register</h2>\\r\\n    </mat-card-title>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content>\\r\\n\\r\\n    <form>\\r\\n\\r\\n      <div>\\r\\n        <mat-form-field style=\\\"width:300px\\\">\\r\\n          <input matInput name=\\\"EmailAddress\\\" value=\\\"{{userViewModel.emailAddress}}\\\" [(ngModel)]=\\\"userViewModel.emailAddress\\\" placeholder=\\\"Email Address\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n        <mat-form-field style=\\\"width:300px\\\">\\r\\n          <input matInput name=\\\"FirstName\\\" placeholder=\\\"First Name\\\" value=\\\"{{userViewModel.firstName}}\\\" [(ngModel)]=\\\"userViewModel.firstName\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n        <mat-form-field style=\\\"width:300px\\\">\\r\\n          <input matInput name=\\\"LastName\\\" placeholder=\\\"Last Name\\\" value=\\\"{{userViewModel.lastName}}\\\" [(ngModel)]=\\\"userViewModel.lastName\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n        <mat-form-field style=\\\"width:300px\\\">\\r\\n          <input matInput name=\\\"CompanyName\\\" placeholder=\\\"Company Name\\\" value=\\\"{{userViewModel.companyName}}\\\" [(ngModel)]=\\\"userViewModel.companyName\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n        <mat-form-field style=\\\"width:300px\\\">\\r\\n          <input matInput  type=\\\"password\\\"  name=\\\"Password\\\" placeholder=\\\"Password\\\" value=\\\"{{userViewModel.password}}\\\" [(ngModel)]=\\\"userViewModel.password\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n        <mat-form-field style=\\\"width:300px\\\">\\r\\n          <input matInput type=\\\"password\\\" name=\\\"PasswordConfirmation\\\" placeholder=\\\"Confirm Password\\\" value=\\\"{{userViewModel.passwordConfirmation}}\\\" [(ngModel)]=\\\"userViewModel.passwordConfirmation\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n\\r\\n\\r\\n    </form>\\r\\n  </mat-card-content>\\r\\n  <mat-card-actions>\\r\\n    <button mat-flat-button color=\\\"primary\\\" (click)=\\\"register()\\\">Register</button>\\r\\n  </mat-card-actions>\\r\\n</mat-card>\"","import { Component, OnInit } from '@angular/core';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\n\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AlertService } from '../../shared-components-services/alert.service';\r\nimport { HttpService } from '../../shared-components-services/http.service';\r\nimport { UserViewModelResponse } from '../view-models/user-response.viewmodel';\r\nimport { UserViewModel } from '../../shared-view-models/user.viewmodel';\r\nimport { SessionService } from '../../shared-components-services/session.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\n\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  public userViewModel: UserViewModel;\r\n\r\n  constructor(private router: Router, private httpService: HttpService,\r\n     private alertService: AlertService, private sessionService: SessionService) {\r\n\r\n    this.userViewModel = new UserViewModel();\r\n    this.userViewModel.firstName = '';\r\n    this.userViewModel.lastName = '';\r\n    this.userViewModel.password = '';\r\n    this.userViewModel.passwordConfirmation = '';\r\n    this.userViewModel.emailAddress = '';\r\n    this.userViewModel.companyName = '';\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public register() {\r\n    let user = new UserViewModel();\r\n    user = this.userViewModel;\r\n\r\n    let url = this.sessionService.appSettings.accountManagementWebApiUrl +  'authorization/register';\r\n    this.httpService.HttpPost<UserViewModelResponse>(url, user).subscribe((response: UserViewModelResponse) => {\r\n      this.registerSuccess(response);\r\n    }, response => this.registerFailed(response));\r\n\r\n  }\r\n\r\n  private registerSuccess(response: UserViewModelResponse) {\r\n    const message = 'Registration Successful.';\r\n    this.alertService.ShowSuccessMessage(message);\r\n    localStorage.setItem('token', response.entity.token);\r\n    this.sessionService.setUserViewModel(response.entity);\r\n    this.router.navigate(['/home/home']);\r\n  }\r\n\r\n  private registerFailed(error: HttpErrorResponse) {\r\n    let errorResponse: UserViewModelResponse = error.error;\r\n    if (error.status > 0) {\r\n      this.alertService.ShowErrorMessage(errorResponse.returnMessage[0]);\r\n    } else {\r\n      this.alertService.ShowErrorMessage(error.message);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"],"sourceRoot":""}